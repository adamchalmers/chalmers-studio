// Tops

import cross, dot, magnitude, normalize from "vectors.kcl"


topNone = 0
topCounterbore = 1
topCountersink = 2

export fn noTopFeature() {
  return { feature = topNone }
}

export fn counterbore(diameter, depth) {
  return {
    diameter = diameter,
    depth = depth,
    feature = topCounterbore
  }
}

export fn countersink(diameter, angle) {
  return {
    diameter = diameter,
    angle = angle,
    feature = topCountersink
  }
}

// Bodies


export fn blind(depth, diameter) {
  return {
    blindDepth = depth,
    diameter = diameter
  }
}

// Ends


export fn drill(bitAngle) {
  return { drillBitAngle = bitAngle }
}

export fn flat() {
  return { drillBitAngle = 179.99deg }
}

// Defining the hole


fn drawTop(@partialHoleProfile, body, top) {
  prof = if top.feature == topNone {
    partialHoleProfile
      |> yLine(length = body.diameter)
  } else if top.feature == topCounterbore {
    lip = (top.diameter - body.diameter) / 2
    partialHoleProfile
      |> xLine(length = top.depth)
      |> yLine(length = top.diameter / 2)
      |> xLine(length = -top.depth)
      |> yLine(length = -lip)
  } else if top.feature == topCountersink {
    t = top.angle / 2
    tr = top.diameter / 2
    br = body.diameter / 2
    assert(tr, isGreaterThan = br, msg = "Diameter of the countersink must be greater than diameter of the hole's body")
    // Ugly trigonometry that I calculated with pen and paper
    up = (tr - br) / tan(t)
    b = br / tan(t)
    diag = (up + b) / cos(t) - (2 / (tan(t) * cos(t)))
    alpha = 90 - t
    partialHoleProfile
      |> xLine(length = up)
      |> yLine(length = tr)
      |> angledLine(length = diag, angle = 270 - alpha)
  } else {
    assert(top.feature, isLessThanOrEqual = topCountersink, msg = "unknown top feature")
  }
  return prof
}


fn topHeight(body, top) {
  height = if top.feature == topNone {
    0
  } else if top.feature == topCounterbore {
    top.depth
  } else if top.feature == topCountersink {
    t = top.angle / 2
    tr = top.diameter / 2
    br = body.diameter / 2
    // Ugly trigonometry that I calculated with pen and paper
    up = (tr - br) / tan(t)
    up
  } else {
    assert(top.feature, isLessThanOrEqual = topCountersink, msg = "unknown top feature")
  }
  return height
}


// Actually defining a hole

// v2 is the X axis by convention, but cannot coerce properly
// so must give it manually.
conventionalAxisV2 = [1, 0, 0]
conventionalAxis = X
conventionalPlane = XY

export fn holeProfile(bottom, body, top) {

  // Calculate the drill bit height
  radius = body.diameter / 2
  theta = bottom.drillBitAngle / 2
  drillHeight = radius / tan(theta)


  // Calculate total model height from top to bottom
  hBody = body.blindDepth
  hBott = drillHeight
  totalHeight = hBody + hBott + topHeight(body, top)
  
  return startSketchOn(conventionalPlane)
    |> startProfile(at = [-totalHeight, 0])
    // Drill profile
    |> xLine(length = drillHeight)
    // Body depth
    |> xLine(length = body.blindDepth)
    // Dynamic dispatch to top
    |> drawTop(body, top)
    // Body depth
    |> xLine(length = -body.blindDepth)
    // // Drill profile
    |> line(endAbsolute = [profileStartX(%), profileStartY(%)])
    |> close()
}

export fn revolveHole(@holeProfile) {
  return holeProfile
    |> revolve(axis = conventionalAxis)
    |> appearance(color = "#ff0000")
}


export fn hole(@solid, face, hole) {
  targetPlane = planeOf(solid, face)
  targetPlaneNormal = cross(v1 = targetPlane.xAxis, v2 = targetPlane.yAxis)

  tn = cross(v1 = conventionalAxisV2, v2 = targetPlaneNormal)
  targetNormal = [
    tn[0]: number(mm),
    tn[1]: number(mm),
    tn[2]: number(mm)
  ]: Point3d
  dotProd = dot(v1 = normalize(targetPlaneNormal), v2 = normalize(conventionalAxisV2)): number(_)
  rot = if magnitude(targetNormal) == 0 {
    if acos(dotProd) == 180deg {
      { axis = [0, 1, 0], angle = 180deg }
    } else {
      { axis = [1, 0, 0], angle = 0 }
    }
  } else {
    {
      axis = targetNormal,
      angle = acos(dotProd)
    }
  }
  toCut = hole
    |> revolveHole()
    |> rotate(axis = rot.axis, angle = rot.angle)
  return subtract(solid, tools = [toCut])
}


